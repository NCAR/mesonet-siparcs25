services:
  redis:
    image: redis:8-alpine
    container_name: my-redis-instance
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - default
  redisinsight:
    image: redis/redisinsight:2.68
    container_name: redisinsight
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/db
    restart: always
    depends_on:
      - redis
    networks:
      - default
  postgres:
    restart: always
    image: "postgres:16"
    container_name: postgres
    hostname: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - default
  thingsboard-ce:
    image: "thingsboard/tb-node:4.0.1.1"
    container_name: thingsboard-ce
    hostname: thingsboard-ce
    ports:
      - "8080:8080"
      - "7070"
      - "1883"
      - "5683-5688:5683-5688/udp"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    environment:
      TB_SERVICE_ID: ${TB_SERVICE_ID}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/status"]
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s

  thingsboard_orch:
    build: ./services/thingsboard
    container_name: thingsboard_orch
    networks:
      - default
    depends_on:
      - thingsboard-ce
    volumes:
      - ./config.yaml:/cloud/config.yaml
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    hostname: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8888:80"
    expose:
      - 8888
    restart: always
    depends_on:
      - postgres
    networks:
      - default
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    hostname: metabase
    restart: always
    volumes:
      - /dev/urandom:/dev/random:ro
    ports:
      - 3000:3000
    environment:
      MB_DB_TYPE: ${MB_DB_TYPE}
      MB_DB_DBNAME: ${MB_DB_DBNAME}
      MB_DB_PORT: ${MB_DB_PORT}
      MB_DB_USER: ${MB_DB_USER}
      MB_DB_PASS: ${MB_DB_PASS}
      MB_DB_HOST: ${MB_DB_HOST}
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 10
    networks:
      - default
  database_api:
    build:
      context: ./services/database_api
    container_name: database_api
    ports:
      - 8000:8000
    depends_on:
      - postgres
    environment:
      DB_USER: ${ORCH_DB_USER}
      DB_PASS: ${ORCH_DB_PASS}
      DB_NAME: ${ORCH_DB_NAME}
      DB_HOST: ${ORCH_DB_HOST}
    volumes:
      - ./services/logger.py:/cloud/services/database_api/logger.py
      - ./logs:/cloud/logs
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/health\")'"]
      interval: 10s
      retries: 3
      start_period: 5s
      timeout: 5s
    networks:
      - default
  mqtt_listener:
    build:
      context: ./services/mqtt_listener
    container_name: mqtt_listener
    hostname: mqtt_listener
    depends_on:
      database_api:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./config.yaml:/cloud/config.yaml
    networks:
      - default
  mqtt_legacy_orch:
    build:
      context: ./services/mqtt_legacy
    container_name: mqtt_legacy_orch
    hostname: mqtt_legacy
    depends_on:
      database_api:
        condition: service_healthy
      redis:
        condition: service_started
      metabase_orch:
        condition: service_healthy
    volumes:
      - ./config.yaml:/cloud/config.yaml
      - ./services/logger.py:/cloud/services/mqtt_legacy/logger.py
      - ./logs:/cloud/logs

  metabase_orch:
    build:
      context: ./services/metabase
    container_name: orch_mb
    hostname: orchestrate_metabase
    env_file:
      - .env
    ports:
      - 8001:8001
    depends_on:
      postgres:
        condition: service_started
      metabase:
        condition: service_healthy
      database_api:
        condition: service_healthy
    environment:
      DB_USER: ${ORCH_DB_USER}
      DB_PASS: ${ORCH_DB_PASS}
      DB_NAME: ${ORCH_DB_NAME}
      DB_HOST: ${ORCH_DB_HOST}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./config.yaml:/cloud/config.yaml
      - ./services/logger.py:/cloud/services/metabase/logger.py
      - ./logs:/cloud/logs
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8001/health\")'"]
      interval: 10s
      retries: 3
      start_period: 5s
      timeout: 5s

  map_server:
    build:
      context: ./services/map_server
    ports:
      - "5001:5001"
    environment:
      - APP_MODULE=map_app:app
      - APP_PORT=5001
      - GUNICORN_WORKERS=5
      - GUNICORN_TIMEOUT=30
      - GUNICORN_WORKER_CLASS=geventwebsocket.gunicorn.workers.GeventWebSocketWorker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./config.yaml:/cloud/config.yaml
      - ./services/logger.py:/cloud/services/map_server/logger.py
    depends_on:
      database_api:
        condition: service_healthy
      redis:
        condition: service_started
      model_service:
        condition: service_healthy
    networks:
      - default

      
  model_service:
    build:
      context: ./services/model_service
    container_name: model_service
    hostname: model_service
    ports:
      - "5000:5000"
    environment:
      - APP_PORT=5000
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5000/health\")'"]
      interval: 10s
      retries: 50
      timeout: 500s
    restart: always
    networks:
      - default

volumes:
  postgres-data:
    name: tb-ce-postgres-data
    driver: local
  redis_data:
    name: redis_data
    driver: local
  redisinsight_data:
    name: redisinsight_data
    driver: local
  tb_data:
  tb_logs:

networks:
  default:
    name: mesonet_default